
import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram import Router
from aiogram.enums import ParseMode

from dotenv import load_dotenv
load_dotenv()

bot = Bot(token=os.getenv("BOT_TOKEN"), parse_mode=ParseMode.HTML)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã ---
class ProfileForm(StatesGroup):
    name = State()
    goals = State()

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ (–ø–æ—Ç–æ–º SQLite) ---
users = {}

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_kb():
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")],
            [KeyboardButton(text="üìù –ú–æ—è –∞–Ω–∫–µ—Ç–∞")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton(text="üíñ –ü–æ–º–æ—á—å")],
        ], resize_keyboard=True
    )
    return kb

@router.message(F.text.in_(["/start", "/menu"]))
async def cmd_start(m: Message):
    await m.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! ‚òÄÔ∏è\n\n–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø–æ –æ–±—â–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º ‚Äî —á–µ—Å—Ç–Ω–æ, –±–µ–∑ –æ—Ü–µ–Ω–æ–∫.", reply_markup=main_kb())

@router.message(F.text == "üìù –ú–æ—è –∞–Ω–∫–µ—Ç–∞")
async def start_form(m: Message, state: FSMContext):
    await m.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(ProfileForm.name)

@router.message(ProfileForm.name)
async def process_name(m: Message, state: FSMContext):
    await state.update_data(name=m.text, goals=[])
    await m.answer("–í—ã–±–µ—Ä–∏ –¥–æ 3 —Ü–µ–ª–µ–π –æ–±—â–µ–Ω–∏—è:", reply_markup=goals_kb())
    await state.set_state(ProfileForm.goals)

# --- –í—ã–±–æ—Ä —Ü–µ–ª–µ–π ---
goal_options = ["üí¨ –ü–æ–±–æ–ª—Ç–∞—Ç—å", "üö∂ –ü—Ä–æ–≥—É–ª–∫–∞", "üõçÔ∏è –ü–æ—à–æ–ø–∏—Ç—å—Å—è", "üéÆ –ò–≥—Ä—ã", "üìö –ü–æ—á–∏—Ç–∞—Ç—å –≤–º–µ—Å—Ç–µ"]

def goals_kb(selected=None):
    kb = ReplyKeyboardBuilder()
    selected = selected or []
    for goal in goal_options:
        prefix = "‚úÖ " if goal in selected else "" 
        kb.button(text=f"{prefix}{goal}")
    kb.button(text="‚úÖ –ì–æ—Ç–æ–≤–æ")
    kb.adjust(2)
    return kb.as_markup(resize_keyboard=True)

@router.message(ProfileForm.goals)
async def process_goals(m: Message, state: FSMContext):
    data = await state.get_data()
    text = m.text.replace("‚úÖ ", "")
    goals = data.get("goals", [])
    if text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        name = data.get("name")
        users[m.from_user.id] = {"name": name, "goals": goals}
        await state.clear()
        await m.answer(f"–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ\n–ò–º—è: {name}\n–¶–µ–ª–∏: {', '.join(goals)}", reply_markup=main_kb())
    elif text in goal_options:
        if text in goals:
            goals.remove(text)
        elif len(goals) < 3:
            goals.append(text)
        else:
            await m.answer("–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 3 —Ü–µ–ª–µ–π")
        await state.update_data(goals=goals)
        await m.answer("–í—ã–±–µ—Ä–∏ —Ü–µ–ª–∏:", reply_markup=goals_kb(goals))
