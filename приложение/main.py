
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv

load_dotenv()

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher(bot, storage=MemoryStorage())

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã ---
class ProfileForm(StatesGroup):
    name = State()
    goals = State()

# --- –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
users = {}

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"))
    kb.add(KeyboardButton("üìù –ú–æ—è –∞–Ω–∫–µ—Ç–∞"))
    kb.add(KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton("üíñ –ü–æ–º–æ—á—å"))
    return kb

@dp.message_handler(commands=['start', 'menu'])
async def cmd_start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! ‚òÄÔ∏è\n\n–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º ‚Äî —á–µ—Å—Ç–Ω–æ, –±–µ–∑ –æ—Ü–µ–Ω–æ–∫.", reply_markup=main_kb())

@dp.message_handler(lambda message: message.text == "üìù –ú–æ—è –∞–Ω–∫–µ—Ç–∞")
async def start_form(message: types.Message):
    await ProfileForm.name.set()
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

@dp.message_handler(state=ProfileForm.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text, goals=[])
    await ProfileForm.goals.set()
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–æ 3 —Ü–µ–ª–µ–π –æ–±—â–µ–Ω–∏—è:", reply_markup=goals_kb())

goal_options = ["üí¨ –ü–æ–±–æ–ª—Ç–∞—Ç—å", "üö∂ –ü—Ä–æ–≥—É–ª–∫–∞", "üõçÔ∏è –ü–æ—à–æ–ø–∏—Ç—å—Å—è", "üéÆ –ò–≥—Ä—ã", "üìö –ü–æ—á–∏—Ç–∞—Ç—å –≤–º–µ—Å—Ç–µ"]

def goals_kb(selected=None):
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    selected = selected or []
    for goal in goal_options:
        prefix = "‚úÖ " if goal in selected else ""
        kb.add(KeyboardButton(f"{prefix}{goal}"))
    kb.add(KeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ"))
    return kb

@dp.message_handler(state=ProfileForm.goals)
async def process_goals(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    goals = user_data.get("goals", [])
    text = message.text.replace("‚úÖ ", "")
    if text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        name = user_data.get("name")
        users[message.from_user.id] = {"name": name, "goals": goals}
        await state.finish()
        await message.answer(f"–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ\n–ò–º—è: {name}\n–¶–µ–ª–∏: {', '.join(goals)}", reply_markup=main_kb())
    elif text in goal_options:
        if text in goals:
            goals.remove(text)
        elif len(goals) < 3:
            goals.append(text)
        else:
            await message.answer("–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 3 —Ü–µ–ª–µ–π")
        await state.update_data(goals=goals)
        await message.answer("–í—ã–±–µ—Ä–∏ —Ü–µ–ª–∏:", reply_markup=goals_kb(goals))

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
